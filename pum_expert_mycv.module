<?php

require_once('menu.inc');

function pum_expert_mycv_views_api() {
    return array('api' => 3.0);
}

/**
 * Implementation of hook_fapi_validation_rules
 */
function pum_expert_mycv_fapi_validation_rules() {
  return array(
    'phone_validation' => array(
      'callback' => 'pum_expert_mycv_phone_validation',
      'error_msg' => 'Invalid phone number %field'
    ),
  );
}

function pum_expert_mycv_phone_validation($value) {
  if (preg_match('/^\+?([-\.\s]|[0-9])*(\(?[0-9]*\)?|[0-9]*)([-\.\s]|[0-9])*$/', $value)) {
    return true;
  }
  return false;
}

function _pum_expert_cv_form_date_string_value($value) {
  if (empty($value)) {
    return '';
  }
  $date = new DateTime($value);
  return $date->format('Y').'-' . $date->format('m').'-' . $date->format('d');
}

function _pum_expert_cv_form_date_value($value) {
  $date = new DateTime($value);
  return array(
    'day' => (int) $date->format('d'),
    'month' => (int) $date->format('m'),
    'year' => (int) $date->format('Y'),
  );
}

function _pum_expert_cv_form_date_submitted_string_value($value) {
  $date = new DateTime($value);
  return $date->format('Ymd');
}

function _pum_expert_cv_form_date_submitted_value($value) {
  $date = new DateTime();
  $date->setDate($value['year'],$value['month'],$value['day']);
  return $date->format('Ymd');
}

function _pum_expert_cv_form_pre_render_date(&$element)
{
  // Don't put empty values if a date has already been set
  if (!empty($element['#default_value'])) {
    $date = new DateTime();
    $today = clone $date;
    $date->setDate($element['#default_value']['year'],$element['#default_value']['month'],$element['#default_value']['day']);
    if ($date != $today) {
      return $element;
    }
  }

  // Loop through each field, add empty option and unset value
  foreach (array('year', 'month', 'day') as $field) {
    if (!isset($element[$field])) {
      continue;
    }

    unset($element[$field]['#value']);
    $element[$field]['#default_value'] = '0';
    $element[$field]['#options'] = array(
        '0' => '',
      ) + $element[$field]['#options'];
  }

  return $element;
}

function pum_expert_mycv_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'pum_expert_mycv'). '/views', '/.inc/');
  $views = array();
  civicrm_initialize();
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

function pum_expert_mycv_get_role_ids($roles) {
    $rids = array();
    $available_roles = user_roles();
    foreach($roles as $role) {
        $rid = array_search($role, $available_roles);
        if ($rid !== false) {
            $rids[$rid] = $rid;
        }
    }

    return $rids;
}

function _pum_expert_mycv_get_groups() {
  $session = CRM_Core_Session::singleton();
  $groups = civicrm_api3('GroupContact', 'get', array('contact_id' => $session->get('userID')));
  $output = '';
  foreach($groups['values'] as $group) {
    if (strlen($output)) {
      $output .= ', ';
    }
    $output .= $group['title'];
  }
  return $output;
}

function _pum_expert_mycv_get_sector() {
  $session = CRM_Core_Session::singleton();
  $enhancedTags = pum_expert_my_cv_enhanced_tags::singleton();
  $tag_id = $enhancedTags->get_sector_tag_id($session->get('userID'));
  $output = '';
  if ($tag_id) {
    $output = civicrm_api3('Tag', 'getvalue', array('id' => $tag_id, 'return' => 'name'));
  }
  return $output;
}

function _pum_expert_mycv_get_areas_of_expertise() {
  $session = CRM_Core_Session::singleton();
  $enhancedTags = pum_expert_my_cv_enhanced_tags::singleton();
  $tag_ids = $enhancedTags->get_areas_of_expertise_tag_ids($session->get('userID'));
  $output = '';
  foreach($tag_ids as $tag) {
    $output .= '<li>'.$tag['name'].'</li>';
  }
  if (strlen($output)) {
    $output = '<ul>' . $output . '</ul>';
  }
  return $output;
}

function _pum_expert_mycv_get_sector_coordinator() {
  $session = CRM_Core_Session::singleton();
  $enhancedTags = pum_expert_my_cv_enhanced_tags::singleton();
  $contact_id = $enhancedTags->get_sector_coordinator_id($session->get('userID'));
  $output = '';
  if ($contact_id) {
    $output = civicrm_api3('Contact', 'getvalue', array('id' => $contact_id, 'return' => 'display_name'));
  }
  return $output;
}
